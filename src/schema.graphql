scalar Date

type Query {    
    feed: [Link!]!
    meetings: [Meeting]!
    meeting(day: Date!): [Meeting]
    assignee(id: ID!): Assignee
}

type Mutation {
    post(url: String!, description: String!): Link!
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    vote(linkId: ID!): Vote
    addMember(Name: String!, Gender: String!): Assignee
    addAssignment(Name: String!, meetingId: ID!, assigneeId: ID!): Assigments
    createMeeting(from: Date): Meeting
} 

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    votes: [Vote!]!
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
}

type Subscription {
    newLink: Link
    newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type Meeting {
    id: ID! 
    createdAt: Date!
    from: Date!
    to: Date!
    assigments: [Assigments!]!
}

type Assigments {
    id: ID! 
    name: String!
    meeting: Meeting!
    assignee: Assignee!
    assitant: Assignee 
}

type Assignee {
    id: ID!
    Name: String!
    Gender: String!
    assigments: [Assigments!]!
}